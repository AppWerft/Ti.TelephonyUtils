/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.telephonyutils;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiBaseActivity;
import org.appcelerator.kroll.common.Log;

import com.android.internal.telephony.*;

import android.Manifest;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.media.AudioManager;
import android.net.Uri;
import android.os.Build;
import android.os.RemoteException;
import android.telephony.TelephonyManager;

@Kroll.module(name = "TelephonyUtils", id = "de.appwerft.telephonyutils")
public class TelephonyutilsModule extends KrollModule {

	// Standard Debugging variables
	private static final String LCAT = "TogglephoneloudspeakerModule";
	Context ctx;
	AudioManager am;
	String[] permissions = { Manifest.permission.MODIFY_PHONE_STATE,
			Manifest.permission.CALL_PHONE,
			Manifest.permission.READ_PHONE_STATE };

	public TelephonyutilsModule() {
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(LCAT, "inside onAppCreate");
	}

	@Kroll.method
	public boolean isSpeakerphoneOn() {
		am = (AudioManager) ctx.getSystemService(Context.AUDIO_SERVICE);
		am.setMode(AudioManager.MODE_IN_CALL);
		return am.isSpeakerphoneOn();
	}

	@Kroll.method
	public void toggle() {
		toggleLoudspeaker();
	}

	@Kroll.method
	public void finishCall() {
		ctx = TiApplication.getInstance().getApplicationContext();
		try {
			TelephonyManager telephonyManager = (TelephonyManager) ctx
					.getSystemService(Context.TELEPHONY_SERVICE);
			Class<?> clazz = Class.forName(telephonyManager.getClass()
					.getName());
			Method method = clazz.getDeclaredMethod("getITelephony");
			method.setAccessible(true);
			ITelephony telephonyService = (ITelephony) method
					.invoke(telephonyManager);
			telephonyService.endCall();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
		} catch (SecurityException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			e.printStackTrace();
		} catch (RemoteException e) {
			e.printStackTrace();
		}
	}

	@Kroll.method
	public void toggleLoudspeaker() {
		ctx = TiApplication.getInstance().getApplicationContext();
		TiApplication.getAppCurrentActivity().setVolumeControlStream(
				AudioManager.STREAM_VOICE_CALL);
		am = (AudioManager) ctx.getSystemService(Context.AUDIO_SERVICE);
		am.setMode(AudioManager.MODE_IN_CALL);
		if (am.isSpeakerphoneOn())
			am.setSpeakerphoneOn(false);
		else
			am.setSpeakerphoneOn(true);
	}

	@Kroll.method
	public boolean hasAllPermissions() {
		return testPermissions().get("success").equals(true);
	}

	@Kroll.method
	public KrollDict testPermissions() {
		boolean all = true;
		Activity activity = TiApplication.getAppRootOrCurrentActivity();
		ArrayList<String> nogranted = new ArrayList<String>();
		ArrayList<String> granted = new ArrayList<String>();
		KrollDict kd = new KrollDict();
		for (String perm : permissions) {
			if (activity.checkSelfPermission(perm) != PackageManager.PERMISSION_GRANTED) {
				nogranted.add(perm);
			} else {
				granted.add(perm);
				all = false;
			}
		}
		kd.put("nogranted", nogranted.toArray(new String[0]));
		kd.put("granted", granted.toArray(new String[0]));
		kd.put("success", all);
		return kd;
	}

	@Kroll.method
	public void call() {
		String phoneNumber = "+"
				+ TiApplication.getInstance().getAppProperties()
						.getString("EMERGENCY_NUMBER", "");
		callNumber(phoneNumber);
	}

	@Kroll.method
	public void callNumber(String number) {
		Activity activity = TiApplication.getAppRootOrCurrentActivity();
		Intent intent = new Intent(Intent.ACTION_CALL, Uri.parse("tel:"
				+ number));
		activity.startActivity(intent);
	}

	@Kroll.method
	public void requestPermission(Object cb) {
		KrollFunction permissionCallback;
		if (cb instanceof KrollFunction) {
			permissionCallback = (KrollFunction) cb;
		} else {
			return;
		}
		String perm = "android.permission.CALL";
		Log.d(LCAT, "example called");
		if (Build.VERSION.SDK_INT < 23) {
			return;
		}
		Activity currentActivity = TiApplication.getInstance()
				.getCurrentActivity();
		ArrayList<String> filteredPermissions = new ArrayList<String>();
		if (currentActivity.checkSelfPermission(perm) != PackageManager.PERMISSION_GRANTED) {
			filteredPermissions.add(perm);
		}
		if (filteredPermissions.size() == 0) {
			Log.w(LCAT, "Permission(s) already granted");
			return;
		}
		int REQUEST_CODE = 123;
		TiBaseActivity.registerPermissionRequestCallback(REQUEST_CODE,
				permissionCallback, getKrollObject());
		currentActivity.requestPermissions(filteredPermissions
				.toArray(new String[filteredPermissions.size()]), REQUEST_CODE);
	}

	@Kroll.method
	public boolean isTelephonysupported() {
		PackageManager pm = TiApplication.getInstance().getApplicationContext()
				.getPackageManager();
		return pm.hasSystemFeature(PackageManager.FEATURE_TELEPHONY);
	}
}
